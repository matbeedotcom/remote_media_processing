# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import execution_pb2 as execution__pb2

GRPC_GENERATED_VERSION = '1.73.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in execution_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class RemoteExecutionServiceStub(object):
    """Remote Execution Service
    Provides secure, sandboxed execution of processing nodes
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExecuteNode = channel.unary_unary(
                '/remotemedia.execution.RemoteExecutionService/ExecuteNode',
                request_serializer=execution__pb2.ExecuteNodeRequest.SerializeToString,
                response_deserializer=execution__pb2.ExecuteNodeResponse.FromString,
                _registered_method=True)
        self.ExecuteCustomTask = channel.unary_unary(
                '/remotemedia.execution.RemoteExecutionService/ExecuteCustomTask',
                request_serializer=execution__pb2.ExecuteCustomTaskRequest.SerializeToString,
                response_deserializer=execution__pb2.ExecuteCustomTaskResponse.FromString,
                _registered_method=True)
        self.StreamNode = channel.stream_stream(
                '/remotemedia.execution.RemoteExecutionService/StreamNode',
                request_serializer=execution__pb2.StreamData.SerializeToString,
                response_deserializer=execution__pb2.StreamData.FromString,
                _registered_method=True)
        self.StreamObject = channel.stream_stream(
                '/remotemedia.execution.RemoteExecutionService/StreamObject',
                request_serializer=execution__pb2.StreamObjectRequest.SerializeToString,
                response_deserializer=execution__pb2.StreamObjectResponse.FromString,
                _registered_method=True)
        self.GetStatus = channel.unary_unary(
                '/remotemedia.execution.RemoteExecutionService/GetStatus',
                request_serializer=execution__pb2.StatusRequest.SerializeToString,
                response_deserializer=execution__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.ListNodes = channel.unary_unary(
                '/remotemedia.execution.RemoteExecutionService/ListNodes',
                request_serializer=execution__pb2.ListNodesRequest.SerializeToString,
                response_deserializer=execution__pb2.ListNodesResponse.FromString,
                _registered_method=True)


class RemoteExecutionServiceServicer(object):
    """Remote Execution Service
    Provides secure, sandboxed execution of processing nodes
    """

    def ExecuteNode(self, request, context):
        """Execute a predefined SDK node
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteCustomTask(self, request, context):
        """Execute user-defined code (Phase 3)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamNode(self, request_iterator, context):
        """Bidirectional streaming for real-time processing
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamObject(self, request_iterator, context):
        """Bidirectional streaming for serialized objects
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStatus(self, request, context):
        """Get service status and health information
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListNodes(self, request, context):
        """List available SDK nodes
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RemoteExecutionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExecuteNode': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteNode,
                    request_deserializer=execution__pb2.ExecuteNodeRequest.FromString,
                    response_serializer=execution__pb2.ExecuteNodeResponse.SerializeToString,
            ),
            'ExecuteCustomTask': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteCustomTask,
                    request_deserializer=execution__pb2.ExecuteCustomTaskRequest.FromString,
                    response_serializer=execution__pb2.ExecuteCustomTaskResponse.SerializeToString,
            ),
            'StreamNode': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamNode,
                    request_deserializer=execution__pb2.StreamData.FromString,
                    response_serializer=execution__pb2.StreamData.SerializeToString,
            ),
            'StreamObject': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamObject,
                    request_deserializer=execution__pb2.StreamObjectRequest.FromString,
                    response_serializer=execution__pb2.StreamObjectResponse.SerializeToString,
            ),
            'GetStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatus,
                    request_deserializer=execution__pb2.StatusRequest.FromString,
                    response_serializer=execution__pb2.StatusResponse.SerializeToString,
            ),
            'ListNodes': grpc.unary_unary_rpc_method_handler(
                    servicer.ListNodes,
                    request_deserializer=execution__pb2.ListNodesRequest.FromString,
                    response_serializer=execution__pb2.ListNodesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'remotemedia.execution.RemoteExecutionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('remotemedia.execution.RemoteExecutionService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RemoteExecutionService(object):
    """Remote Execution Service
    Provides secure, sandboxed execution of processing nodes
    """

    @staticmethod
    def ExecuteNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/remotemedia.execution.RemoteExecutionService/ExecuteNode',
            execution__pb2.ExecuteNodeRequest.SerializeToString,
            execution__pb2.ExecuteNodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteCustomTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/remotemedia.execution.RemoteExecutionService/ExecuteCustomTask',
            execution__pb2.ExecuteCustomTaskRequest.SerializeToString,
            execution__pb2.ExecuteCustomTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamNode(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/remotemedia.execution.RemoteExecutionService/StreamNode',
            execution__pb2.StreamData.SerializeToString,
            execution__pb2.StreamData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamObject(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/remotemedia.execution.RemoteExecutionService/StreamObject',
            execution__pb2.StreamObjectRequest.SerializeToString,
            execution__pb2.StreamObjectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/remotemedia.execution.RemoteExecutionService/GetStatus',
            execution__pb2.StatusRequest.SerializeToString,
            execution__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListNodes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/remotemedia.execution.RemoteExecutionService/ListNodes',
            execution__pb2.ListNodesRequest.SerializeToString,
            execution__pb2.ListNodesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
