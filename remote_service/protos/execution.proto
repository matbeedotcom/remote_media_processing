syntax = "proto3";

package remotemedia.execution;

import "types.proto";

// Remote Execution Service
// Provides secure, sandboxed execution of processing nodes
service RemoteExecutionService {
  // Execute a predefined SDK node
  rpc ExecuteNode(ExecuteNodeRequest) returns (ExecuteNodeResponse);
  
  // Execute user-defined code (Phase 3)
  rpc ExecuteCustomTask(ExecuteCustomTaskRequest) returns (ExecuteCustomTaskResponse);
  
  // Bidirectional streaming for real-time processing
  rpc StreamNode(stream StreamData) returns (stream StreamData);
  
  // Bidirectional streaming for serialized objects
  rpc StreamObject(stream StreamObjectRequest) returns (stream StreamObjectResponse);
  
  // Execute a method on a serialized object
  rpc ExecuteObjectMethod(ExecuteObjectMethodRequest) returns (ExecuteObjectMethodResponse);
  
  // Get service status and health information
  rpc GetStatus(StatusRequest) returns (StatusResponse);
  
  // List available SDK nodes
  rpc ListNodes(ListNodesRequest) returns (ListNodesResponse);
  
  // Generator streaming support
  rpc InitGenerator(InitGeneratorRequest) returns (InitGeneratorResponse);
  rpc GetNextBatch(GetNextBatchRequest) returns (GetNextBatchResponse);
  rpc CloseGenerator(CloseGeneratorRequest) returns (CloseGeneratorResponse);
}

// Execute SDK Node Request
message ExecuteNodeRequest {
  string node_type = 1;           // Type of SDK node (e.g., "AudioTransform")
  map<string, string> config = 2; // Node configuration parameters
  bytes input_data = 3;           // Serialized input data
  string serialization_format = 4; // Format used for serialization (json, pickle)
  ExecutionOptions options = 5;    // Execution options
}

// Execute SDK Node Response
message ExecuteNodeResponse {
  ExecutionStatus status = 1;     // Execution status
  bytes output_data = 2;          // Serialized output data
  string error_message = 3;       // Error message if execution failed
  string error_traceback = 4;     // Full error traceback for debugging
  ExecutionMetrics metrics = 5;   // Execution performance metrics
}

// Execute Custom Task Request (Phase 3)
message ExecuteCustomTaskRequest {
  bytes code_package = 1;         // Packaged user code (zip archive)
  string entry_point = 2;         // Entry point function/method
  bytes input_data = 3;           // Serialized input data
  string serialization_format = 4; // Format used for serialization
  repeated string dependencies = 5; // Required Python packages
  ExecutionOptions options = 6;    // Execution options
}

// Execute Custom Task Response (Phase 3)
message ExecuteCustomTaskResponse {
  ExecutionStatus status = 1;     // Execution status
  bytes output_data = 2;          // Serialized output data
  string error_message = 3;       // Error message if execution failed
  string error_traceback = 4;     // Full error traceback for debugging
  ExecutionMetrics metrics = 5;   // Execution performance metrics
  repeated string installed_deps = 6; // Successfully installed dependencies
}

// Data packet for bidirectional streaming
message StreamData {
  // The first message from the client MUST set the init field.
  // Subsequent messages should only set the data field.
  oneof payload {
    StreamInit init = 1;
    bytes data = 2;
  }
  
  // This can be used by the server to send back errors.
  string error_message = 10;
}

// Message to initialize a streaming session
message StreamInit {
  string node_type = 1;             // The type of node to execute (e.g., "AudioTransform")
  map<string, string> config = 2;   // The configuration for the node
  string serialization_format = 3;   // The serialization format to use
}

// Request for streaming a serialized object
message StreamObjectRequest {
  oneof payload {
    StreamObjectInit init = 1;
    bytes data = 2;
  }
}

// Response for streaming a serialized object
message StreamObjectResponse {
  oneof payload {
    bytes data = 1;
    string error = 2;
  }
}

// Message to initialize a serialized object streaming session
message StreamObjectInit {
  oneof object_specifier {
    bytes code_package = 1;           // Packaged user code (zip archive)
    string session_id = 2;            // Session ID for existing objects
  }
  map<string, string> config = 3;     // The configuration for the node
  string serialization_format = 4;    // The serialization format for data payloads
  repeated string dependencies = 5;   // Required Python packages
}

// Request to execute a method on a serialized object
message ExecuteObjectMethodRequest {
    oneof object_specifier {
        bytes code_package = 1; // Used for the first call to initialize the session
        string session_id = 2;   // Used for subsequent calls
    }
    map<string, string> config = 3;
    string serialization_format = 4;
    string method_name = 5;
    bytes method_args_data = 6; // Serialized arguments
    bytes method_kwargs_data = 7; // Serialized keyword arguments
    repeated string dependencies = 8; // Required Python packages
}

// Response from executing a method on a serialized object
message ExecuteObjectMethodResponse {
    ExecutionStatus status = 1;
    bytes result_data = 2; // Serialized result
    string error_message = 3;
    string error_traceback = 4;
    string session_id = 5; // Returned on the first call, confirms the session
}

// Streaming session close response
message StreamCloseResponse {
  string session_id = 1;          // Session identifier
  ExecutionMetrics total_metrics = 2; // Total session metrics
}

// Service status request
message StatusRequest {
  bool include_metrics = 1;       // Include performance metrics
  bool include_sessions = 2;      // Include active session info
}

// Service status response
message StatusResponse {
  ServiceStatus status = 1;       // Overall service status
  ServiceMetrics metrics = 2;     // Service performance metrics
  repeated SessionInfo active_sessions = 3; // Active streaming sessions
  string version = 4;             // Service version
  int64 uptime_seconds = 5;       // Service uptime in seconds
}

// List available nodes request
message ListNodesRequest {
  string category = 1;            // Filter by category (audio, video, transform)
}

// List available nodes response
message ListNodesResponse {
  repeated NodeInfo available_nodes = 1; // Available SDK nodes
}

// Information about an available node
message NodeInfo {
  string node_type = 1;           // Node type identifier
  string category = 2;            // Node category
  string description = 3;         // Node description
  repeated ParameterInfo parameters = 4; // Configuration parameters
}

// Parameter information for a node
message ParameterInfo {
  string name = 1;                // Parameter name
  string type = 2;                // Parameter type
  string description = 3;         // Parameter description
  bool required = 4;              // Whether parameter is required
  string default_value = 5;       // Default value (if any)
}

// Information about an active session
message SessionInfo {
  string session_id = 1;          // Session identifier
  string node_type = 2;           // Node type being executed
  int64 created_timestamp = 3;    // Session creation time
  int64 last_activity = 4;        // Last activity timestamp
  int32 processed_items = 5;      // Number of items processed
}

// Generator streaming messages
message InitGeneratorRequest {
  string session_id = 1;           // Object session ID
  string method_name = 2;          // Generator method name
  bytes method_args_data = 3;      // Serialized arguments
  string serialization_format = 4;
  bytes method_kwargs_data = 5;    // Serialized keyword arguments
}

message InitGeneratorResponse {
  ExecutionStatus status = 1;
  string generator_id = 2;         // Unique generator session ID
  string error_message = 3;
}

message GetNextBatchRequest {
  string generator_id = 1;         // Generator session ID
  int32 batch_size = 2;           // Number of items to fetch
  string serialization_format = 3;
}

message GetNextBatchResponse {
  ExecutionStatus status = 1;
  repeated bytes items = 2;        // Serialized items
  bool has_more = 3;              // More items available
  string error_message = 4;
}

message CloseGeneratorRequest {
  string generator_id = 1;
}

message CloseGeneratorResponse {
  ExecutionStatus status = 1;
} 